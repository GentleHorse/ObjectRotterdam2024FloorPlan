"use client";
import {
  require_react_dom
} from "./chunk-GPLYVEWD.js";
import {
  require_react
} from "./chunk-RDZYK52F.js";
import {
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/million/dist/packages/react.mjs
var import_react2 = __toESM(require_react(), 1);

// node_modules/million/dist/shared/million.8ff20917.mjs
var Object$ = Object;
var Map$ = Map;
var Set$ = Set;
var SetHas$ = Set$.prototype.has;
var SetAdd$ = Set$.prototype.add;
var MapHas$ = Map$.prototype.has;
var MapGet$ = Map$.prototype.get;
var MapSet$ = Map$.prototype.set;
var ChildFlag = 1;
var AttributeFlag = 2;
var EventFlag = 4;
var StyleAttributeFlag = 8;
var SvgAttributeFlag = 16;
var BlockFlag = 32;
var TEXT_NODE_CACHE = "__t";
var EVENT_PATCH = "__p";
var EVENTS_REGISTRY = "__e";
var IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
var XLINK_NS = "http://www.w3.org/1999/xlink";
var XML_NS = "http://www.w3.org/2000/xmlns/";
var X_CHAR = 120;
var NON_PROPS = new Set$(["href", "list", "form", "tabIndex", "download"]);
var VOID_ELEMENTS = new Set$(["area", "base", "basefont", "bgsound", "br", "col", "command", "embed", "frame", "hr", "image", "img", "input", "isindex", "keygen", "link", "menuitem", "meta", "nextid", "param", "source", "track", "wbr"]);

// node_modules/million/dist/shared/million.52d69b41.mjs
if (typeof window === "undefined") {
  throw new Error(
    "See http://million.dev/docs/install to install the compiler."
  );
}
var document$ = document;
var queueMicrotask$ = queueMicrotask;
document$.createElement("template");
var HTM_TEMPLATE = document$.createElement("template");
var HTM_TEMPLATE_CONTENT = HTM_TEMPLATE.content;
var SVG_TEMPLATE = document$.createElementNS(
  "http://www.w3.org/2000/svg",
  "svg"
);
var node$ = Node.prototype;
var element$ = Element.prototype;
var characterData$ = CharacterData.prototype;
var getOwnPropertyDescriptor$ = Object$.getOwnPropertyDescriptor;
var insertBefore$ = node$.insertBefore;
var cloneNode$ = node$.cloneNode;
var replaceChild$ = node$.replaceChild;
var remove$$1 = element$.remove;
var addEventListener$ = node$.addEventListener;
var removeAttribute$ = element$.removeAttribute;
var setAttribute$ = element$.setAttribute;
var setAttributeNS$ = element$.setAttributeNS;
var setTextContent$ = getOwnPropertyDescriptor$(node$, "textContent").set;
var firstChild$ = getOwnPropertyDescriptor$(node$, "firstChild").get;
var nextSibling$ = getOwnPropertyDescriptor$(node$, "nextSibling").get;
var characterDataSet$ = getOwnPropertyDescriptor$(
  characterData$,
  "data"
).set;
var stringToDOM = (content, svg) => {
  const template = svg ? SVG_TEMPLATE : HTM_TEMPLATE;
  template.innerHTML = content;
  const dom = svg ? SVG_TEMPLATE : HTM_TEMPLATE_CONTENT;
  return dom.firstChild;
};
document$[EVENTS_REGISTRY] = new Set$();
var createEventListener = (el, name, value) => {
  let event = name.toLowerCase();
  let capture = false;
  if (event.endsWith("capture")) {
    event = event.slice(0, -7);
    capture = true;
  }
  const key = `$$${event}`;
  if (!SetHas$.call(document$[EVENTS_REGISTRY], event)) {
    addEventListener$.call(
      document$,
      event,
      (nativeEvent) => {
        let el2 = nativeEvent.target;
        while (el2) {
          const handler = el2[key];
          if (handler) {
            Object$.defineProperty(nativeEvent, "currentTarget", {
              configurable: true,
              get() {
                return el2;
              }
            });
            handler(nativeEvent);
          }
          el2 = el2.parentNode;
        }
      },
      { capture }
    );
    SetAdd$.call(document$[EVENTS_REGISTRY], event);
  }
  const patch2 = (newValue) => {
    var _a;
    if (!newValue) {
      el[key] = null;
    } else if (!("key" in newValue && newValue.key === ((_a = el[key]) == null ? void 0 : _a.key))) {
      el[key] = newValue;
    }
  };
  patch2(value);
  return patch2;
};
var childAt = (el, index) => {
  let child = firstChild$.call(el);
  if (index) {
    for (let j = 0; j < index; ++j) {
      if (!child)
        break;
      child = nextSibling$.call(child);
    }
  }
  return child;
};
var insertText = (el, value, index) => {
  const node = document$.createTextNode(value);
  const child = childAt(el, index);
  insertBefore$.call(el, node, child);
  return node;
};
var setText = (el, value) => {
  characterDataSet$.call(el, value);
};
var setStyleAttribute = (el, name, value) => {
  if (typeof value !== "number" || IS_NON_DIMENSIONAL.test(name)) {
    el.style[name] = value;
  } else if (typeof value === "string") {
    el.style.cssText = value;
  } else if (name.startsWith("-")) {
    el.style.setProperty(name, String(value));
  } else if (value === void 0 || value === null) {
    el.style[name] = "";
  } else {
    el.style[name] = `${String(value)}px`;
  }
};
var setSvgAttribute = (el, name, value) => {
  name = name.replace(/xlink(?:H|:h)/, "h").replace(/sName$/, "s");
  if (name.startsWith("xmlns")) {
    setAttributeNS$.call(el, XML_NS, name, String(value));
  } else if (name.startsWith("xlink")) {
    setAttributeNS$.call(el, XLINK_NS, "href", String(value));
  }
};
var setAttribute = (el, name, value) => {
  const isValueNully = value === void 0 || value === null;
  value = isValueNully ? "" : value;
  if (name in el && el[name] !== void 0 && el[name] !== null && !(el instanceof SVGElement) && SetHas$.call(NON_PROPS, name)) {
    try {
      el[name] = value;
    } catch (_err) {
    }
  } else if (!isValueNully && value !== "" && (value !== false || name.includes("-"))) {
    setAttribute$.call(el, name, String(value));
  } else {
    removeAttribute$.call(el, name);
  }
};
var __defProp$1 = Object.defineProperty;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$1 = (obj, key, value) => {
  __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var AbstractBlock = class {
  constructor() {
    __publicField$1(this, "r");
    __publicField$1(this, "e");
    __publicField$1(this, "l");
    __publicField$1(this, "g");
    __publicField$1(this, "_t");
    __publicField$1(this, "d");
    __publicField$1(this, "k");
    __publicField$1(this, "c");
  }
};
var renderToTemplate = (vnode, edits = [], path = []) => {
  var _a, _b;
  if (typeof vnode === "string")
    return vnode;
  if (typeof vnode === "number" || typeof vnode === "bigint" || vnode === true) {
    return String(vnode);
  }
  if (vnode === null || vnode === void 0 || vnode === false)
    return "";
  if (typeof vnode === "object" && "$" in vnode) {
    edits.push({
      p: path,
      e: [
        {
          /* type */
          t: ChildFlag,
          /* name */
          n: null,
          /* value */
          v: null,
          /* hole */
          h: vnode.$,
          /* index */
          i: 0,
          /* listener */
          l: null,
          /* patch */
          p: null,
          /* block */
          b: null
        }
      ],
      i: []
    });
    return "<slot/>";
  }
  let props = "";
  let children = "";
  const current = {
    p: path,
    // The location of the edit in in the virtual node tree
    e: [],
    // Occur on mount + patch
    i: []
    // Occur before mount
  };
  for (let name in vnode.props) {
    const value = vnode.props[name];
    if (name === "key" || name === "ref" || name === "children") {
      continue;
    }
    if (name === "className")
      name = "class";
    if (name === "htmlFor")
      name = "for";
    if (name.startsWith("on")) {
      const isValueHole = "$" in value;
      if (isValueHole) {
        current.e.push({
          /* type */
          t: EventFlag,
          /* name */
          n: name.slice(2),
          /* value */
          v: null,
          /* hole */
          h: value.$,
          /* index */
          i: null,
          /* listener */
          l: null,
          /* patch */
          p: null,
          /* block */
          b: null
        });
      } else {
        current.i.push({
          /* type */
          t: EventFlag,
          /* name */
          n: name.slice(2),
          /* value */
          v: null,
          /* hole */
          h: null,
          /* index */
          i: null,
          /* listener */
          l: value,
          /* patch */
          p: null,
          /* block */
          b: null
        });
      }
      continue;
    }
    if (value) {
      if (typeof value === "object" && "$" in value) {
        if (name === "style") {
          current.e.push({
            /* type */
            t: StyleAttributeFlag,
            /* name */
            n: name,
            /* value */
            v: null,
            /* hole */
            h: value.$,
            /* index */
            i: null,
            /* listener */
            l: null,
            /* patch */
            p: null,
            /* block */
            b: null
          });
        } else if (name.charCodeAt(0) === X_CHAR) {
          current.e.push({
            /* type */
            t: SvgAttributeFlag,
            /* name */
            n: name,
            /* value */
            v: null,
            /* hole */
            h: value.$,
            /* index */
            i: null,
            /* listener */
            l: null,
            /* patch */
            p: null,
            /* block */
            b: null
          });
        } else {
          current.e.push({
            /* type */
            t: AttributeFlag,
            /* name */
            n: name,
            /* value */
            v: null,
            /* hole */
            h: value.$,
            /* index */
            i: null,
            /* listener */
            l: null,
            /* patch */
            p: null,
            /* block */
            b: null
          });
        }
        continue;
      }
      if (name === "style" && typeof value === "object") {
        let style = "";
        for (const key in value) {
          if (typeof value[key] === "object") {
            current.e.push({
              /* type */
              t: StyleAttributeFlag,
              /* name */
              n: key,
              /* value */
              v: null,
              /* hole */
              h: value[key].$,
              /* index */
              i: null,
              /* listener */
              l: null,
              /* patch */
              p: null,
              /* block */
              b: null
            });
            continue;
          }
          let kebabKey = "";
          for (let i = 0, j = key.length; i < j; ++i) {
            const char = key.charCodeAt(i);
            if (char < 97) {
              kebabKey += `-${String.fromCharCode(char + 32)}`;
            } else {
              kebabKey += key[i];
            }
          }
          style += `${kebabKey}:${String(value[key])};`;
        }
        props += ` style="${style}"`;
        continue;
      }
      props += ` ${name}="${String(value)}"`;
    }
  }
  if (SetHas$.call(VOID_ELEMENTS, vnode.type)) {
    if (current.e.length)
      edits.push(current);
    return `<${vnode.type}${props} />`;
  }
  let canMergeString = false;
  for (let i = 0, j = ((_a = vnode.props.children) == null ? void 0 : _a.length) || 0, k = 0; i < j; ++i) {
    const child = (_b = vnode.props.children) == null ? void 0 : _b[i];
    if (child === null || child === void 0 || child === false)
      continue;
    if (typeof child === "object" && "$" in child) {
      current.e.push({
        /* type */
        t: ChildFlag,
        /* name */
        n: null,
        /* value */
        v: null,
        /* hole */
        h: child.$,
        /* index */
        i,
        /* listener */
        l: null,
        /* patch */
        p: null,
        /* block */
        b: null
      });
      continue;
    }
    if (child instanceof AbstractBlock) {
      current.i.push({
        /* type */
        t: BlockFlag,
        /* name */
        n: null,
        /* value */
        v: null,
        /* hole */
        h: null,
        /* index */
        i,
        /* listener */
        l: null,
        /* patch */
        p: null,
        /* block */
        b: child
      });
      continue;
    }
    if (typeof child === "string" || typeof child === "number" || typeof child === "bigint") {
      const value = typeof child === "number" || typeof child === "bigint" ? String(child) : child;
      if (canMergeString) {
        current.i.push({
          /* type */
          t: ChildFlag,
          /* name */
          n: null,
          /* value */
          v: value,
          /* hole */
          h: null,
          /* index */
          i,
          /* listener */
          l: null,
          /* patch */
          p: null,
          /* block */
          b: null
        });
        continue;
      }
      canMergeString = true;
      children += value;
      k++;
      continue;
    }
    canMergeString = false;
    const newPath = path.slice();
    newPath.push(k++);
    children += renderToTemplate(child, edits, newPath);
  }
  if (current.i.length || current.e.length)
    edits.push(current);
  return `<${vnode.type}${props}>${children}</${vnode.type}>`;
};
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var mapArray = (children) => {
  return new ArrayBlock(children);
};
var ArrayBlock = class extends AbstractBlock {
  constructor(children) {
    super();
    __publicField(this, "b");
    this.b = children;
  }
  v() {
  }
  p(fragment) {
    const oldChildren = this.b;
    const newChildren = fragment.b;
    const oldChildrenLength = oldChildren.length;
    const newChildrenLength = newChildren.length;
    const parent = this.t();
    if (this === fragment)
      return parent;
    if (newChildrenLength === 0 && oldChildrenLength === 0)
      return parent;
    this.b = newChildren;
    if (newChildrenLength === 0) {
      arrayRemove$.call(this);
      return parent;
    }
    if (oldChildrenLength === 0) {
      arrayMount$.call(fragment, parent);
      return parent;
    }
    let oldHead = 0;
    let newHead = 0;
    let oldTail = oldChildrenLength - 1;
    let newTail = newChildrenLength - 1;
    let oldHeadChild = oldChildren[0];
    let newHeadChild = newChildren[0];
    let oldTailChild = oldChildren[oldTail];
    let newTailChild = newChildren[newTail];
    let oldKeyMap;
    while (oldHead <= oldTail && newHead <= newTail) {
      if (!oldHeadChild) {
        oldHeadChild = oldChildren[++oldHead];
        continue;
      }
      if (!oldTailChild) {
        oldTailChild = oldChildren[--oldTail];
        continue;
      }
      const oldHeadKey = oldHeadChild.k;
      const newHeadKey = newHeadChild.k;
      if (oldHeadKey === newHeadKey) {
        patch$.call(oldHeadChild, newHeadChild);
        newChildren[newHead] = oldHeadChild;
        oldHeadChild = oldChildren[++oldHead];
        newHeadChild = newChildren[++newHead];
        continue;
      }
      const oldTailKey = oldTailChild.k;
      const newTailKey = newTailChild.k;
      if (oldTailKey === newTailKey) {
        patch$.call(oldTailChild, newTailChild);
        newChildren[newTail] = oldTailChild;
        oldTailChild = oldChildren[--oldTail];
        newTailChild = newChildren[--newTail];
        continue;
      }
      if (oldHeadKey === newTailKey) {
        patch$.call(oldHeadChild, newTailChild);
        newChildren[newTail] = oldHeadChild;
        const nextChild = newChildren[newTail + 1];
        move$.call(oldHeadChild, nextChild, (nextChild == null ? void 0 : nextChild.l) || null);
        oldHeadChild = oldChildren[++oldHead];
        newTailChild = newChildren[--newTail];
        continue;
      }
      if (oldTailKey === newHeadKey) {
        patch$.call(oldTailChild, newHeadChild);
        newChildren[newHead] = oldTailChild;
        const nextChild = oldChildren[oldHead];
        move$.call(oldTailChild, nextChild, (nextChild == null ? void 0 : nextChild.l) || null);
        oldTailChild = oldChildren[--oldTail];
        newHeadChild = newChildren[++newHead];
        continue;
      }
      if (!oldKeyMap) {
        oldKeyMap = new Map$();
        for (let i = oldHead; i <= oldTail; i++) {
          MapSet$.call(oldKeyMap, oldChildren[i].k, i);
        }
      }
      const oldIndex = oldKeyMap.get(newHeadKey);
      if (oldIndex === void 0) {
        mount$.call(newHeadChild, parent, oldHeadChild.l || null);
      } else {
        const oldChild = oldChildren[oldIndex];
        move$.call(oldChild, oldHeadChild, null);
        patch$.call(oldChild, newHeadChild);
        newChildren[newHead] = oldChild;
        oldChildren[oldIndex] = null;
      }
      newHeadChild = newChildren[++newHead];
    }
    if (oldHead <= oldTail || newHead <= newTail) {
      if (oldHead > oldTail) {
        const nextChild = newChildren[newTail + 1];
        for (let i = newHead; i <= newTail; ++i) {
          mount$.call(newChildren[i], parent, nextChild ? nextChild.l : null);
        }
      } else {
        for (let i = oldHead; i <= oldTail; ++i) {
          remove$.call(oldChildren[i]);
        }
      }
    }
    return parent;
  }
  m(parent, refNode = null) {
    if (this._t)
      return this._t;
    for (let i = 0, j = this.b.length; i < j; ++i) {
      const block3 = this.b[i];
      mount$.call(block3, parent, refNode);
    }
    this._t = parent;
    return parent;
  }
  x() {
    const parent = this.t();
    if (parent) {
      setTextContent$.call(parent, "");
    } else {
      for (let i = 0, j = this.b.length; i < j; ++i) {
        remove$.call(this.b[i]);
      }
    }
    this.b = [];
  }
  u() {
    return true;
  }
  s() {
    return this.b.map((block3) => block3.s()).join("");
  }
  t() {
    if (!this._t)
      this._t = this.b[0].t();
    return this._t;
  }
};
var array$ = ArrayBlock.prototype;
var arrayMount$ = array$.m;
var arrayPatch$ = array$.p;
var arrayRemove$ = array$.x;
var HOLE_PROXY = new Proxy(
  {},
  {
    // A universal getter will return a Hole instance if props[any] is accessed
    // Allows code to identify holes in virtual nodes ("digs" them out)
    get(_, key) {
      return { $: key };
    }
  }
);
var block = (fn, unwrap2, shouldUpdate, svg) => {
  const vnode = fn(HOLE_PROXY);
  const edits = [];
  const root = stringToDOM(
    renderToTemplate(unwrap2 ? unwrap2(vnode) : vnode, edits),
    svg
  );
  return (props, key, shouldUpdateCurrentBlock) => {
    return new Block(
      root,
      edits,
      props,
      key ?? (props == null ? void 0 : props.key) ?? null,
      shouldUpdateCurrentBlock ?? shouldUpdate ?? null,
      null
    );
  };
};
var patch = (oldBlock, newBlock) => {
  if ("b" in oldBlock || "b" in newBlock) {
    arrayPatch$.call(oldBlock, newBlock);
  }
  if (!oldBlock.l)
    mount$.call(oldBlock);
  if (oldBlock.k && oldBlock.k === newBlock.k || oldBlock.r === newBlock.r) {
    return patch$.call(oldBlock, newBlock);
  }
  const el = mount$.call(newBlock, oldBlock.t(), oldBlock.l);
  remove$.call(oldBlock);
  oldBlock.k = newBlock.k;
  return el;
};
var Block = class extends AbstractBlock {
  constructor(root, edits, props, key, shouldUpdate, getElements) {
    super();
    this.r = root;
    this.d = props;
    this.e = edits;
    this.k = key;
    this.c = Array(edits.length);
    if (shouldUpdate)
      this.u = shouldUpdate;
    if (getElements)
      this.g = getElements;
  }
  m(parent, refNode = null) {
    var _a, _b;
    if (this.l)
      return this.l;
    const root = cloneNode$.call(this.r, true);
    const elements = (_a = this.g) == null ? void 0 : _a.call(this, root);
    if (elements)
      this.c = elements;
    for (let i = 0, j = this.e.length; i < j; ++i) {
      const current = this.e[i];
      const el = (elements == null ? void 0 : elements[i]) ?? getCurrentElement(current.p, root, this.c, i);
      for (let k = 0, l = current.e.length; k < l; ++k) {
        const edit = current.e[k];
        const value = this.d[edit.h];
        if (edit.t & ChildFlag) {
          if (value instanceof AbstractBlock) {
            value.m(el, childAt(el, edit.i));
            continue;
          }
          if (!el[TEXT_NODE_CACHE])
            el[TEXT_NODE_CACHE] = new Array(l);
          if (value && typeof value === "object" && "foreign" in value) {
            const scopeEl = value.current;
            el[TEXT_NODE_CACHE][k] = scopeEl;
            insertBefore$.call(el, scopeEl, childAt(el, edit.i));
            continue;
          }
          el[TEXT_NODE_CACHE][k] = insertText(
            el,
            // eslint-disable-next-line eqeqeq
            value == null || value === false ? "" : String(value),
            edit.i
          );
        } else if (edit.t & EventFlag) {
          const patch2 = createEventListener(el, edit.n, value);
          el[EVENT_PATCH + edit.n] = patch2;
        } else if (edit.t & AttributeFlag) {
          setAttribute(el, edit.n, value);
        } else if (edit.t & StyleAttributeFlag) {
          if (typeof value === "string" || typeof value === "number") {
            setStyleAttribute(el, edit.n, value);
          } else {
            for (const style in value) {
              setStyleAttribute(el, style, value[style]);
            }
          }
        } else {
          setSvgAttribute(el, edit.n, value);
        }
      }
      const initsLength = (_b = current.i) == null ? void 0 : _b.length;
      if (!initsLength)
        continue;
      for (let k = 0; k < initsLength; ++k) {
        const init = current.i[k];
        if (init.t & ChildFlag) {
          if (init.v)
            insertText(el, init.v, init.i);
        } else if (init.t & EventFlag) {
          createEventListener(el, init.n, init.l);
        } else {
          init.b.m(el, childAt(el, init.i));
        }
      }
    }
    if (parent) {
      insertBefore$.call(parent, root, refNode);
    }
    this.l = root;
    return root;
  }
  p(newBlock) {
    var _a, _b;
    const root = this.l;
    if (!newBlock.d)
      return root;
    const props = this.d;
    if (!shouldUpdate$.call(this, props, newBlock.d))
      return root;
    this.d = newBlock.d;
    for (let i = 0, j = this.e.length; i < j; ++i) {
      const current = this.e[i];
      const el = this.c[i] ?? getCurrentElement(current.p, root, this.c, i);
      for (let k = 0, l = current.e.length; k < l; ++k) {
        const edit = current.e[k];
        const oldValue = props[edit.h];
        const newValue = newBlock.d[edit.h];
        if (newValue === oldValue)
          continue;
        if (edit.t & EventFlag) {
          el[EVENT_PATCH + edit.n](newValue);
          continue;
        }
        if (edit.t & ChildFlag) {
          if (oldValue instanceof AbstractBlock) {
            const firstEdit = (_b = (_a = newBlock.e) == null ? void 0 : _a[i]) == null ? void 0 : _b.e[k];
            const newChildBlock = newBlock.d[firstEdit.h];
            oldValue.p(newChildBlock);
            continue;
          }
          if (newValue && typeof newValue === "object" && "foreign" in newValue) {
            const scopeEl = el[TEXT_NODE_CACHE][k];
            if ("unstable" in newValue && oldValue !== newValue) {
              const newScopeEl = newValue.current;
              el[TEXT_NODE_CACHE][k] = newScopeEl;
              replaceChild$.call(el, newScopeEl, scopeEl);
            } else {
              newValue.current = scopeEl;
            }
            continue;
          }
          setText(
            el[TEXT_NODE_CACHE][k],
            // eslint-disable-next-line eqeqeq
            newValue == null || newValue === false ? "" : String(newValue)
          );
        } else if (edit.t & AttributeFlag) {
          setAttribute(el, edit.n, newValue);
        } else if (edit.t & StyleAttributeFlag) {
          if (typeof newValue === "string" || typeof newValue === "number") {
            setStyleAttribute(el, edit.n, newValue);
          } else {
            for (const style in newValue) {
              if (newValue[style] !== oldValue[style]) {
                setStyleAttribute(el, style, newValue[style]);
              }
            }
          }
        } else {
          setSvgAttribute(el, edit.n, newValue);
        }
      }
    }
    return root;
  }
  v(block22 = null, refNode = null) {
    insertBefore$.call(this.t(), this.l, block22 ? block22.l : refNode);
  }
  x() {
    remove$$1.call(this.l);
    this.l = null;
  }
  u(_oldProps, _newProps) {
    return true;
  }
  s() {
    var _a;
    return String((_a = this.l) == null ? void 0 : _a.outerHTML);
  }
  t() {
    var _a;
    if (!this._t)
      this._t = (_a = this.l) == null ? void 0 : _a.parentElement;
    return this._t;
  }
};
var getCurrentElement = (path, root, cache, key) => {
  const pathLength = path.length;
  if (!pathLength)
    return root;
  const isCacheAndKeyExists = cache && key !== void 0;
  if (isCacheAndKeyExists && cache[key]) {
    return cache[key];
  }
  for (let i = 0; i < pathLength; ++i) {
    const siblings = path[i];
    root = childAt(root, siblings);
  }
  if (isCacheAndKeyExists)
    cache[key] = root;
  return root;
};
var block$ = Block.prototype;
var mount$ = block$.m;
var patch$ = block$.p;
var move$ = block$.v;
var remove$ = block$.x;
var shouldUpdate$ = block$.u;

// node_modules/million/dist/shared/million.4d88fdd9.mjs
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var RENDER_SCOPE = "slot";
var SVG_RENDER_SCOPE = "g";
var Effect = ({
  effect,
  deps
}) => {
  (0, import_react.useEffect)(effect, deps || []);
  return null;
};
var REGISTRY = /* @__PURE__ */ new Map();
var processProps = (props, ref, portals) => {
  const processedProps = { ref };
  let currentIndex = 0;
  for (const key in props) {
    const value = props[key];
    if ((0, import_react.isValidElement)(value)) {
      processedProps[key] = renderReactScope(
        value,
        false,
        portals,
        currentIndex++,
        false
      );
      continue;
    }
    processedProps[key] = props[key];
  }
  return processedProps;
};
var renderReactScope = (vnode, unstable, portals, currentIndex, server) => {
  var _a;
  const el = (_a = portals == null ? void 0 : portals[currentIndex]) == null ? void 0 : _a.current;
  if (typeof window === "undefined" || server && !el) {
    return (0, import_react.createElement)(
      RENDER_SCOPE,
      { suppressHydrationWarning: true },
      vnode
    );
  }
  if ((0, import_react.isValidElement)(vnode) && typeof vnode.type === "function" && "__block_callable__" in vnode.type) {
    const puppetComponent = vnode.type(vnode.props);
    if (REGISTRY.has(puppetComponent.type)) {
      const puppetBlock = REGISTRY.get(puppetComponent.type);
      if (typeof puppetBlock === "function") {
        return puppetBlock(puppetComponent.props);
      }
    }
  }
  const current = el ?? document.createElement(RENDER_SCOPE);
  const reactPortal = (0, import_react_dom.createPortal)(vnode, current);
  const millionPortal = {
    foreign: true,
    current,
    portal: reactPortal,
    unstable
  };
  if (portals)
    portals[currentIndex] = millionPortal;
  return millionPortal;
};
var unwrap = (vnode) => {
  var _a;
  if (typeof vnode !== "object" || vnode === null || !("type" in vnode)) {
    if (typeof vnode === "number") {
      return String(vnode);
    }
    return vnode;
  }
  let type = vnode.type;
  if (typeof type === "function") {
    return unwrap(type(vnode.props ?? {}));
  }
  if (typeof type === "object" && "$" in type)
    return type;
  const props = { ...vnode.props };
  if ("css" in props && "__EMOTION_TYPE_PLEASE_DO_NOT_USE__" in props) {
    props.style = props.css.styles;
    type = props.__EMOTION_TYPE_PLEASE_DO_NOT_USE__;
    delete props.__EMOTION_TYPE_PLEASE_DO_NOT_USE__;
    delete props.css;
  }
  const children = (_a = vnode.props) == null ? void 0 : _a.children;
  if (children !== void 0 && children !== null) {
    props.children = flatten(vnode.props.children).map(
      (child) => unwrap(child)
    );
  }
  return {
    type,
    // lets pretend no function go through
    props
  };
};
var flatten = (rawChildren) => {
  if (rawChildren === void 0 || rawChildren === null)
    return [];
  if (typeof rawChildren === "object" && "type" in rawChildren && rawChildren.type === import_react.Fragment) {
    return flatten(rawChildren.props.children);
  }
  if (!Array.isArray(rawChildren) || typeof rawChildren === "object" && "$" in rawChildren) {
    return [rawChildren];
  }
  const flattenedChildren = rawChildren.flat(Infinity);
  const children = [];
  for (let i = 0, l = flattenedChildren.length; i < l; ++i) {
    children.push(...flatten(flattenedChildren[i]));
  }
  return children;
};

// node_modules/million/dist/packages/react.mjs
var import_react_dom2 = __toESM(require_react_dom(), 1);
var block2 = (fn, { block: compiledBlock, shouldUpdate, svg, as } = {}) => {
  const block22 = fn ? block(fn, unwrap, shouldUpdate, svg) : compiledBlock;
  const defaultType = svg ? SVG_RENDER_SCOPE : RENDER_SCOPE;
  const MillionBlock = (props, forwardedRef) => {
    var _a;
    const hmrTimestamp = props._hmr;
    const ref = (0, import_react2.useRef)(null);
    const patch$1 = (0, import_react2.useRef)(null);
    const portalRef = (0, import_react2.useRef)([]);
    props = processProps(props, forwardedRef, portalRef.current);
    (_a = patch$1.current) == null ? void 0 : _a.call(patch$1, props);
    const effect = (0, import_react2.useCallback)(() => {
      if (!ref.current)
        return;
      const currentBlock = block22(props, props.key);
      if (hmrTimestamp)
        ref.current.textContent = "";
      if (patch$1.current === null || hmrTimestamp) {
        queueMicrotask$(() => {
          mount$.call(currentBlock, ref.current, null);
        });
        patch$1.current = (props2) => {
          queueMicrotask$(() => {
            patch(currentBlock, block22(props2, props2.key, shouldUpdate));
          });
        };
      }
    }, []);
    const marker = (0, import_react2.useMemo)(() => {
      return (0, import_react2.createElement)(as ?? defaultType, { ref });
    }, []);
    const vnode = (0, import_react2.createElement)(
      import_react2.Fragment,
      null,
      marker,
      (0, import_react2.createElement)(Effect, {
        effect,
        deps: hmrTimestamp ? [hmrTimestamp] : []
      }),
      ...portalRef.current.map((p) => p.portal)
    );
    return vnode;
  };
  if (!MapHas$.call(REGISTRY, MillionBlock)) {
    MapSet$.call(REGISTRY, MillionBlock, block22);
  }
  return MillionBlock;
};
var MillionArray = ({
  each,
  children,
  memo: memo2,
  svg,
  as,
  ...rest
}) => {
  const ref = (0, import_react2.useRef)(null);
  const [portals] = (0, import_react2.useState)(() => ({
    current: Array(each.length)
  }));
  const fragmentRef = (0, import_react2.useRef)(null);
  const cache = (0, import_react2.useRef)({
    each: null,
    children: null,
    mounted: false
  });
  const [, setMountPortals] = (0, import_react2.useState)(false);
  if (fragmentRef.current && (each !== cache.current.each || !memo2)) {
    queueMicrotask$(() => {
      const newChildren = createChildren(
        each,
        children,
        cache,
        portals,
        memo2
      );
      arrayPatch$.call(fragmentRef.current, mapArray(newChildren));
    });
  }
  const defaultType = svg ? SVG_RENDER_SCOPE : RENDER_SCOPE;
  const MillionFor = (0, import_react2.createElement)(
    import_react2.Fragment,
    null,
    (0, import_react2.createElement)(as ?? defaultType, { ...rest, ref }),
    ...portals.current.map((p) => p.portal)
  );
  (0, import_react2.useEffect)(() => {
    if (!ref.current || fragmentRef.current)
      return;
    queueMicrotask$(() => {
      if (cache.current.mounted)
        return;
      const newChildren = createChildren(
        each,
        children,
        cache,
        portals,
        memo2
      );
      fragmentRef.current = mapArray(newChildren);
      if (!MapHas$.call(REGISTRY, MillionFor)) {
        MapSet$.call(REGISTRY, MillionFor, fragmentRef.current);
      }
      arrayMount$.call(fragmentRef.current, ref.current);
      cache.current.mounted = true;
      setMountPortals(true);
    });
  }, [ref.current]);
  return MillionFor;
};
var typedMemo = import_react2.memo;
var For = typedMemo(MillionArray);
var createChildren = (each, getComponent, cache, portals, memo2) => {
  var _a;
  const children = Array(each.length);
  const currentCache = cache.current;
  for (let i = 0, l = each.length; i < l; ++i) {
    if (memo2 && currentCache.each && currentCache.each[i] === each[i]) {
      children[i] = (_a = currentCache.children) == null ? void 0 : _a[i];
      continue;
    }
    const vnode = getComponent(each[i], i);
    if (MapHas$.call(REGISTRY, vnode.type)) {
      if (!currentCache.block) {
        currentCache.block = MapGet$.call(REGISTRY, vnode.type);
      }
      children[i] = currentCache.block(vnode.props, i);
      continue;
    }
    if (typeof vnode.type === "function" && "__block_callable__" in vnode.type) {
      const puppetComponent = vnode.type(vnode.props);
      if (MapHas$.call(REGISTRY, puppetComponent.type)) {
        const puppetBlock = MapGet$.call(REGISTRY, puppetComponent.type);
        if (typeof puppetBlock === "function") {
          children[i] = puppetBlock(puppetComponent.props);
          continue;
        }
      }
    }
    const block3 = block((props) => props == null ? void 0 : props.scope);
    const currentBlock = (props, index) => {
      return block3(
        {
          scope: renderReactScope(
            (0, import_react2.createElement)(vnode.type, props),
            false,
            portals.current,
            index,
            false
          )
        },
        vnode.key ? String(vnode.key) : void 0
      );
    };
    MapSet$.call(REGISTRY, vnode.type, currentBlock);
    currentCache.block = currentBlock;
    children[i] = currentBlock(vnode.props, i);
  }
  currentCache.each = each;
  currentCache.children = children;
  return children;
};
var shutUpReact = () => {
  const consoleOverride = (callback) => (message, ...rest) => {
    if (message.startsWith("Warning:") || message.startsWith("Invalid hook call."))
      return;
    callback(message, rest);
  };
  console.warn = consoleOverride(console.warn);
  console.error = consoleOverride(console.error);
};
var macro = (expression) => expression;
export {
  For,
  REGISTRY,
  block2 as block,
  macro,
  renderReactScope,
  shutUpReact,
  unwrap
};
//# sourceMappingURL=million_react.js.map
